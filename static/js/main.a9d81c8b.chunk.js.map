{"version":3,"sources":["components/InputButton.js","components/Calculator.js","components/Display.js","components/FormulaDisplay.js","components/App.js","index.js"],"names":["NumberButton","props","className","id","onClick","value","Calculator","currentInput","state","display","formula","getLastInput","bind","handleNumberPressed","updateDisplay","handleOperation","handleClear","handleSolve","checkDuplicateDecimals","this","length","event","target","formArr","test","push","setState","number","split","shift","join","arr","i","Number","parseInt","array","solution","eval","toString","React","Component","Display","FormulaDisplay","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a9d81c8b.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst NumberButton = (props) => {\n    return (\n        <button className=\"button\" id={props.id} onClick={props.onClick} value={props.value}>\n            {props.value}\n        </button>\n    )\n}\n\nexport default NumberButton;","import React from 'react';\nimport NumberButton from './InputButton';\nimport Display from './Display';\nimport FormulaDisplay from './FormulaDisplay';\nimport '../index.css';\n\n\nclass Calculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.currentInput = \"\";\n\n        this.state = {\n            display: \"0\",\n            formula: []\n        }\n\n\n        this.getLastInput = this.getLastInput.bind(this);\n        this.handleNumberPressed = this.handleNumberPressed.bind(this);\n        this.updateDisplay = this.updateDisplay.bind(this);\n        this.handleOperation = this.handleOperation.bind(this);\n        this.handleClear = this.handleClear.bind(this);\n        this.handleSolve = this.handleSolve.bind(this);\n        this.checkDuplicateDecimals = this.checkDuplicateDecimals.bind(this)\n    }\n\n    getLastInput() {\n        if (this.state.formula.length < 1) {\n            return \"empty\"\n        }\n        return (this.state.formula[this.state.formula.length - 1])\n    }\n\n    handleNumberPressed(event) {\n\n        let value = event.target.value;\n        let formArr = this.state.formula\n        if (value === \".\" && this.checkDuplicateDecimals() === true) {\n            return;\n        }\n        // eslint-disable-next-line \n        if (/[\\+\\-\\*\\/]/g.test(this.currentInput) === true) {\n            formArr.push(this.currentInput);\n            this.currentInput = \"\";\n            this.setState({\n                formula: formArr\n            })\n        }\n\n        let number = this.currentInput.split(\"\");\n        number.push(value);\n\n        //Will remove any unnecessary zeros\n        if (/^0+/g.test(this.currentInput)) {\n            number.shift();\n        }\n\n\n\n        this.currentInput = number.join('');\n        this.setState({\n            display: this.currentInput\n        })\n        // Use to test if number or operation\n        // if (/[\\+\\-\\*\\/]/g.test(this.currentInput) === true) {\n\n        // }\n\n        //test if last input was an operation\n        // if(/+\\-*\\//g.test(this.getLastInput) === true){\n\n        //     number.push(value);\n\n        // } else if(/[\\d]/g.test(this.getLastInput) === true){\n\n        // }\n    }\n\n\n    /**\n     * Made this separate method in order to force the display to update\n     * in the correct order (was behaving async before this method)\n     * @param {} value \n     */\n    updateDisplay(value) {\n        this.setState({\n            display: value\n        })\n\n    }\n\n    checkDuplicateDecimals() {\n        let arr = this.currentInput.split('');\n        for (let i = 0; i < arr.length; i++) {\n            if (arr[i] === \".\") {\n                return true;\n            }\n        }\n        return false;\n\n\n    }\n\n    handleOperation(event) {\n        let value = event.target.value;\n        let formArr = this.state.formula;\n\n        if (Number.parseInt(this.currentInput)) {\n            formArr.push(this.currentInput);\n            this.currentInput = value;\n        } else {\n            let array = this.currentInput.split('');\n            array.push(value);\n            this.currentInput = array.join('')\n            // eslint-disable-next-line\n            if (/\\-$/g.test(this.currentInput)) {\n                this.currentInput = array[array.length - 2] + array[array.length - 1] + \"\";\n            } else {\n                this.currentInput = value;\n            }\n        }\n        this.setState({\n            formula: formArr\n        })\n    }\n\n    handleSolve() {\n\n        let solution = this.state.formula;\n        solution.push(this.currentInput);\n        // eslint-disable-next-line\n        solution = eval(solution.join(''))\n\n        this.setState({\n            display: solution.toString(),\n            formula: []\n        })\n        this.currentInput = solution.toString();\n    }\n\n    handleClear() {\n        this.setState({\n            display: \"0\",\n            formula: []\n        })\n        this.currentInput = \"\";\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n\n                <div className=\"calculator\">\n                    <FormulaDisplay id=\"formula-display\" value={this.state.formula.join(\"\") + this.currentInput} />\n                    <Display id=\"display\" value={this.state.display} />\n\n\n                    <NumberButton id=\"one\" value=\"1\" onClick={this.handleNumberPressed} />\n                    <NumberButton id=\"two\" value=\"2\" onClick={this.handleNumberPressed} />\n                    <NumberButton id=\"three\" value=\"3\" onClick={this.handleNumberPressed} />\n\n\n                    <NumberButton id=\"four\" value=\"4\" onClick={this.handleNumberPressed} />\n                    <NumberButton id=\"five\" value=\"5\" onClick={this.handleNumberPressed} />\n                    <NumberButton id=\"six\" value=\"6\" onClick={this.handleNumberPressed} />\n\n\n                    <NumberButton id=\"seven\" value=\"7\" onClick={this.handleNumberPressed} />\n                    <NumberButton id=\"eight\" value=\"8\" onClick={this.handleNumberPressed} />\n                    <NumberButton id=\"nine\" value=\"9\" onClick={this.handleNumberPressed} />\n\n                    <NumberButton id=\"zero\" value=\"0\" onClick={this.handleNumberPressed} />\n\n                    <NumberButton id=\"decimal\" value=\".\" onClick={this.handleNumberPressed} />\n\n                    <NumberButton id=\"add\" value=\"+\" onClick={this.handleOperation} />\n                    <NumberButton id=\"subtract\" value=\"-\" onClick={this.handleOperation} />\n                    <NumberButton id=\"multiply\" value=\"*\" onClick={this.handleOperation} />\n                    <NumberButton id=\"divide\" value=\"/\" onClick={this.handleOperation} />\n\n                    <NumberButton id=\"clear\" value=\"AC\" onClick={this.handleClear} />\n\n                    <NumberButton id=\"equals\" value=\"=\" onClick={this.handleSolve} />\n\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Calculator;","import React from 'react';\n\n\nconst Display = (props) => {\n\n    return (\n        <div id={props.id}>\n            {props.value}\n\n        </div>\n    )\n}\n\nexport default Display;","import React from 'react';\n\n\nconst FormulaDisplay = (props) => {\n\n    return (\n        <div id={props.id}>\n            {props.value}\n\n        </div>\n    )\n}\n\nexport default FormulaDisplay;","import React from 'react';\nimport Calculator from './Calculator';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Calculator />\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}